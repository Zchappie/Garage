; marktes
(declare-fun m (Int) Int)
; market sizes
(assert (>= (m 0) 1000000))(assert (<= (m 0) 10000000))
(assert (>= (m 1) 1000000))(assert (<= (m 1) 8000000))
(assert (>= (m 2) 2000000))(assert (<= (m 2) 8000000))
(assert (>= (m 3) 4000000))(assert (<= (m 3) 5000000))
(assert (>= (m 4) 3000000))(assert (<= (m 4) 4000000))
(assert (= 30000000 (+ (m 0) (m 1) (m 2) (m 3) (m 4))))
; salesperson
(declare-fun sp (Int) Int)
; salesperson to market assignments
(assert (>= (sp 0) 0)) (assert (<= (sp 0) 4))
(assert (>= (sp 1) 0)) (assert (<= (sp 1) 4))
(assert (>= (sp 2) 0)) (assert (<= (sp 2) 4))
(assert (>= (sp 3) 0)) (assert (<= (sp 3) 4))
(assert (>= (sp 4) 0)) (assert (<= (sp 4) 4))
; salesperson minimum requirements
(assert (>= (m (sp 0)) 10000000))
(assert (>= (m (sp 1)) 7000000))
(assert (>= (m (sp 2)) 3000000))
(assert (>= (m (sp 3)) 7000000))
(assert (>= (m (sp 4)) 5000000))
; shares of each salesperson for each area (market, salesperson) -> percent
(declare-fun s (Int Int) Real)
(assert (ite (= (sp 0) 0) (= (s 0 0) 0.20) (= (s 0 0) 0.0)))
(assert (ite (= (sp 0) 1) (= (s 1 0) 0.20) (= (s 1 0) 0.0)))
(assert (ite (= (sp 0) 2) (= (s 2 0) 0.20) (= (s 2 0) 0.0)))
(assert (ite (= (sp 0) 3) (= (s 3 0) 0.20) (= (s 3 0) 0.0)))
(assert (ite (= (sp 0) 4) (= (s 4 0) 0.20) (= (s 4 0) 0.0)))

(assert (ite (= (sp 1) 0) (= (s 0 1) 0.15) (= (s 0 1) 0.0)))
(assert (ite (= (sp 1) 1) (= (s 1 1) 0.15) (= (s 1 1) 0.0)))
(assert (ite (= (sp 1) 2) (= (s 2 1) 0.15) (= (s 2 1) 0.0)))
(assert (ite (= (sp 1) 3) (= (s 3 1) 0.15) (= (s 3 1) 0.0)))
(assert (ite (= (sp 1) 4) (= (s 4 1) 0.15) (= (s 4 1) 0.0)))

(assert (ite (= (sp 2) 0) (= (s 0 2) 0.15) (= (s 0 2) 0.0)))
(assert (ite (= (sp 2) 1) (= (s 1 2) 0.15) (= (s 1 2) 0.0)))
(assert (ite (= (sp 2) 2) (= (s 2 2) 0.15) (= (s 2 2) 0.0)))
(assert (ite (= (sp 2) 3) (= (s 3 2) 0.15) (= (s 3 2) 0.0)))
(assert (ite (= (sp 2) 4) (= (s 4 2) 0.15) (= (s 4 2) 0.0)))

(assert (ite (= (sp 3) 0) (= (s 0 3) 0.10) (= (s 0 3) 0.0)))
(assert (ite (= (sp 3) 1) (= (s 1 3) 0.10) (= (s 1 3) 0.0)))
(assert (ite (= (sp 3) 2) (= (s 2 3) 0.10) (= (s 2 3) 0.0)))
(assert (ite (= (sp 3) 3) (= (s 3 3) 0.10) (= (s 3 3) 0.0)))
(assert (ite (= (sp 3) 4) (= (s 4 3) 0.10) (= (s 4 3) 0.0)))

(assert (ite (= (sp 4) 0) (= (s 0 4) 0.08) (= (s 0 4) 0.0)))
(assert (ite (= (sp 4) 1) (= (s 1 4) 0.08) (= (s 1 4) 0.0)))
(assert (ite (= (sp 4) 2) (= (s 2 4) 0.08) (= (s 2 4) 0.0)))
(assert (ite (= (sp 4) 3) (= (s 3 4) 0.08) (= (s 3 4) 0.0)))
(assert (ite (= (sp 4) 4) (= (s 4 4) 0.08) (= (s 4 4) 0.0)))
;total share percent
(declare-fun ts (Int) Real)
(assert (= (ts 0 ) (+ (s 0 0) (s 0 1) (s 0 2) (s 0 3) (s 0 4))))
(assert (= (ts 1 ) (+ (s 1 0) (s 1 1) (s 1 2) (s 1 3) (s 1 4))))
(assert (= (ts 2 ) (+ (s 2 0) (s 2 1) (s 2 2) (s 2 3) (s 2 4))))
(assert (= (ts 3 ) (+ (s 3 0) (s 3 1) (s 3 2) (s 3 3) (s 3 4))))
(assert (= (ts 4 ) (+ (s 4 0) (s 4 1) (s 4 2) (s 4 3) (s 4 4))))
;total share percent capped
(declare-fun tsc (Int) Real)
(assert (ite (>= (ts 0 ) 0.25) (= (tsc 0) 0.25) (= (ts 0) (tsc 0))))
(assert (ite (>= (ts 1 ) 0.25) (= (tsc 1) 0.25) (= (ts 1) (tsc 1))))
(assert (ite (>= (ts 2 ) 0.25) (= (tsc 2) 0.25) (= (ts 2) (tsc 2))))
(assert (ite (>= (ts 3 ) 0.25) (= (tsc 3) 0.25) (= (ts 3) (tsc 3))))
(assert (ite (>= (ts 4 ) 0.25) (= (tsc 4) 0.25) (= (ts 4) (tsc 4))))
; total earnings
(declare-fun e () Real)
(assert (= e (+ (* (tsc 0) (m 0)) (* (tsc 1) (m 1)) (* (tsc 2) (m 2)) (* (tsc 3) (m 3)) (* (tsc 4) (m 4)))))
; comment out to check for possible e since 6,3m is impossible
(assert (= e 6300000))
(check-sat)
(get-model)


